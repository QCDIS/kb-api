name: CI pipeline (configurable build, test, publish)

on:
  workflow_call:
    inputs:
      docker_folder:
        required: true
        type: string
      tag:
        required: true
        type: string
      push:
        required: true
        type: boolean
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true
env:
  DOCKER_FOLDER:  ${{ inputs.docker_folder }}
  TAG:  ${{ inputs.tag }}
  DOCKERHUB_IMAGE_ID: "qcdis/"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build docker
        run: |
          cd $DOCKER_FOLDER && docker build . --file Dockerfile -t $TAG

      - name: Create network
        run: |
          docker network create testing

      - name: Start app
        run: |
          docker run -d \
            -p 8000:8000 \
            --network testing \
            -e "ELASTICSEARCH_URL=http://es01:9200/" \
            -e "ELASTICSEARCH_USERNAME=elastic" \
            -e "ELASTICSEARCH_PASSWORD=elastic" \
            -e "DEBUG=true" \
            $TAG:latest

      - name: Start Elasticsearch
        run: |
          docker run --rm -d \
            --name es01 \
            -p 9200:9200 \
            --network testing \
            -e "discovery.type=single-node" \
            -e "ELASTIC_PASSWORD=elastic" \
            -e "xpack.security.http.ssl.enabled=false" \
            --health-cmd 'curl -u elastic:changeme http://localhost:9200/_cat/health | grep -q green' \
            --health-interval 10s \
            docker.elastic.co/elasticsearch/elasticsearch:8.8.1

      - name: Install test dependencies
        run: |
          npm install

      - name: Wait for Elasticsearch
        uses: raschmitt/wait-for-healthy-container/@v1
        with:
          container-name: es01
          timeout: 120

      - name: Load fixtures into Elasticsearch
        run: |
          pip install elasticsearch
          python fixtures/load_fixtures.py

      - name: Run API tests
        run: |
          npx portman --cliOptionsFile portman/portman-cli.yaml

      - name: Login to github Registry
        if: ${{ inputs.push }}
        uses: docker/login-action@v2
        with:
          registry: "https://index.docker.io/v1/"
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
      - name: Push image to container Registry
        if: ${{ inputs.push }}
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$DOCKERHUB_IMAGE_ID$TAG
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $TAG $IMAGE_ID:$VERSION        
          if [ "${{ secrets.docker_password }}" != '' ]; then
            docker push $IMAGE_ID:$VERSION
            docker tag $TAG $IMAGE_ID:latest
            docker push $IMAGE_ID:latest
          fi
